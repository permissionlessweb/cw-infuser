{
  "contract_name": "cw-infuser",
  "contract_version": "0.1.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": [
      "admin_fee",
      "cw721_code_id"
    ],
    "properties": {
      "admin": {
        "description": "Admin of this contract",
        "type": [
          "string",
          "null"
        ]
      },
      "admin_fee": {
        "description": "Fee from each infusion payment, if required. Goes to admin during a successful infusion",
        "type": "integer",
        "format": "uint64",
        "minimum": 0.0
      },
      "cw721_code_id": {
        "description": "Code-ID of the cw721-collection",
        "type": "integer",
        "format": "uint64",
        "minimum": 0.0
      },
      "max_bundles": {
        "description": "Maximum bundles any infusion is able to require",
        "type": [
          "integer",
          "null"
        ],
        "format": "uint64",
        "minimum": 0.0
      },
      "max_infusions": {
        "description": "Maximum infusions that may be created at once",
        "type": [
          "integer",
          "null"
        ],
        "format": "uint64",
        "minimum": 0.0
      },
      "max_per_bundle": {
        "description": "Maximim tokens required for any infusions eligible collections",
        "type": [
          "integer",
          "null"
        ],
        "format": "uint64",
        "minimum": 0.0
      },
      "min_creation_fee": {
        "description": "Minimum fee that is required for creating an infusion",
        "anyOf": [
          {
            "$ref": "#/definitions/Coin"
          },
          {
            "type": "null"
          }
        ]
      },
      "min_infusion_fee": {
        "description": "Minimum fee that is required to be set when new infusions are being created",
        "anyOf": [
          {
            "$ref": "#/definitions/Coin"
          },
          {
            "type": "null"
          }
        ]
      },
      "min_per_bundle": {
        "description": "Minimum tokens required for any infusions eligible collections",
        "type": [
          "integer",
          "null"
        ],
        "format": "uint64",
        "minimum": 0.0
      }
    },
    "additionalProperties": false,
    "definitions": {
      "Coin": {
        "type": "object",
        "required": [
          "amount",
          "denom"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/Uint128"
          },
          "denom": {
            "type": "string"
          }
        }
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      }
    }
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "update_config"
        ],
        "properties": {
          "update_config": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "create_infusion"
        ],
        "properties": {
          "create_infusion": {
            "type": "object",
            "required": [
              "collections"
            ],
            "properties": {
              "collections": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Infusion"
                }
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "infuse"
        ],
        "properties": {
          "infuse": {
            "type": "object",
            "required": [
              "bundle",
              "infusion_id"
            ],
            "properties": {
              "bundle": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Bundle"
                }
              },
              "infusion_id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Addr": {
        "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
        "type": "string"
      },
      "Bundle": {
        "type": "object",
        "required": [
          "nfts"
        ],
        "properties": {
          "nfts": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/NFT"
            }
          }
        },
        "additionalProperties": false
      },
      "BurnParams": {
        "type": "object",
        "properties": {
          "compatible_traits": {
            "anyOf": [
              {
                "$ref": "#/definitions/CompatibleTraits"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "Coin": {
        "type": "object",
        "required": [
          "amount",
          "denom"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/Uint128"
          },
          "denom": {
            "type": "string"
          }
        }
      },
      "CompatibleTraits": {
        "type": "object",
        "required": [
          "a",
          "b"
        ],
        "properties": {
          "a": {
            "type": "string"
          },
          "b": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "InfusedCollection": {
        "type": "object",
        "required": [
          "base_uri",
          "name",
          "num_tokens",
          "sg",
          "symbol"
        ],
        "properties": {
          "addr": {
            "type": [
              "string",
              "null"
            ]
          },
          "admin": {
            "type": [
              "string",
              "null"
            ]
          },
          "base_uri": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "num_tokens": {
            "type": "integer",
            "format": "uint32",
            "minimum": 0.0
          },
          "sg": {
            "type": "boolean"
          },
          "symbol": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Infusion": {
        "type": "object",
        "required": [
          "collections",
          "infused_collection",
          "infusion_params"
        ],
        "properties": {
          "collections": {
            "description": "NFT collections eligible for a specific infusion",
            "type": "array",
            "items": {
              "$ref": "#/definitions/NFTCollection"
            }
          },
          "infused_collection": {
            "description": "Current data of the new infused collection",
            "allOf": [
              {
                "$ref": "#/definitions/InfusedCollection"
              }
            ]
          },
          "infusion_params": {
            "description": "Parameters of a specific infusion",
            "allOf": [
              {
                "$ref": "#/definitions/InfusionParams"
              }
            ]
          },
          "payment_recipient": {
            "description": "Recipient of payments for an infusion",
            "anyOf": [
              {
                "$ref": "#/definitions/Addr"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "InfusionParams": {
        "type": "object",
        "properties": {
          "min_per_bundle": {
            "description": "Minimum amount each collection in any infusion is required",
            "type": [
              "integer",
              "null"
            ],
            "format": "uint64",
            "minimum": 0.0
          },
          "mint_fee": {
            "description": "Minium amount of mint fee required for any infusion if set. Rewards will go to either infusion creator, or reward granted",
            "anyOf": [
              {
                "$ref": "#/definitions/Coin"
              },
              {
                "type": "null"
              }
            ]
          },
          "params": {
            "anyOf": [
              {
                "$ref": "#/definitions/BurnParams"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "NFT": {
        "type": "object",
        "required": [
          "addr",
          "token_id"
        ],
        "properties": {
          "addr": {
            "$ref": "#/definitions/Addr"
          },
          "token_id": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        },
        "additionalProperties": false
      },
      "NFTCollection": {
        "type": "object",
        "required": [
          "addr",
          "min_req"
        ],
        "properties": {
          "addr": {
            "description": "Contract address of collection",
            "allOf": [
              {
                "$ref": "#/definitions/Addr"
              }
            ]
          },
          "min_req": {
            "description": "Minimum tokens required to infuse",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        },
        "additionalProperties": false
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "config"
        ],
        "properties": {
          "config": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "returns an infusion for a given infusion owner & infusion id.",
        "type": "object",
        "required": [
          "infusion"
        ],
        "properties": {
          "infusion": {
            "type": "object",
            "required": [
              "addr",
              "id"
            ],
            "properties": {
              "addr": {
                "$ref": "#/definitions/Addr"
              },
              "id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "returns an infusion for a given infusion id.",
        "type": "object",
        "required": [
          "infusion_by_id"
        ],
        "properties": {
          "infusion_by_id": {
            "type": "object",
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "returns all infusions owned by a given address defaults to 30 entries from a given index point of the infusion map. TODO: optimize pagination",
        "type": "object",
        "required": [
          "infusions"
        ],
        "properties": {
          "infusions": {
            "type": "object",
            "required": [
              "addr",
              "index"
            ],
            "properties": {
              "addr": {
                "$ref": "#/definitions/Addr"
              },
              "index": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "boolean if addr is an eligible collection for bundle",
        "type": "object",
        "required": [
          "is_in_bundle"
        ],
        "properties": {
          "is_in_bundle": {
            "type": "object",
            "required": [
              "collection_addr",
              "infusion_id"
            ],
            "properties": {
              "collection_addr": {
                "$ref": "#/definitions/Addr"
              },
              "infusion_id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Addr": {
        "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
        "type": "string"
      }
    }
  },
  "migrate": null,
  "sudo": null,
  "responses": {
    "config": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Config",
      "type": "object",
      "required": [
        "admin",
        "admin_fee",
        "code_hash",
        "code_id",
        "latest_infusion_id",
        "max_bundles",
        "max_infusions",
        "max_per_bundle",
        "min_per_bundle"
      ],
      "properties": {
        "admin": {
          "$ref": "#/definitions/Addr"
        },
        "admin_fee": {
          "description": "% fee from any infusion fee set to go to admin. 10 == 10% , 71 == 71%",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "code_hash": {
          "$ref": "#/definitions/HexBinary"
        },
        "code_id": {
          "description": "cw721-base code_id",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "latest_infusion_id": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "max_bundles": {
          "description": "maximum bundles allowed per infusion",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "max_infusions": {
          "description": "maximum unique infusion that can be created at once. Defaults to 2",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "max_per_bundle": {
          "description": "maximum nfts bundles can require",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "min_creation_fee": {
          "description": "Minimum fee that is required for creating an infusion",
          "anyOf": [
            {
              "$ref": "#/definitions/Coin"
            },
            {
              "type": "null"
            }
          ]
        },
        "min_infusion_fee": {
          "description": "Minimum fee that is required to be set when new infusions are being created",
          "anyOf": [
            {
              "$ref": "#/definitions/Coin"
            },
            {
              "type": "null"
            }
          ]
        },
        "min_per_bundle": {
          "description": "contract global minimum nft each collection in infusion must require to burn. hard coded to 1",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          }
        },
        "HexBinary": {
          "description": "This is a wrapper around Vec<u8> to add hex de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is similar to `cosmwasm_std::Binary` but uses hex. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
          "type": "string"
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "infusion": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Infusion",
      "type": "object",
      "required": [
        "collections",
        "infused_collection",
        "infusion_params"
      ],
      "properties": {
        "collections": {
          "description": "NFT collections eligible for a specific infusion",
          "type": "array",
          "items": {
            "$ref": "#/definitions/NFTCollection"
          }
        },
        "infused_collection": {
          "description": "Current data of the new infused collection",
          "allOf": [
            {
              "$ref": "#/definitions/InfusedCollection"
            }
          ]
        },
        "infusion_params": {
          "description": "Parameters of a specific infusion",
          "allOf": [
            {
              "$ref": "#/definitions/InfusionParams"
            }
          ]
        },
        "payment_recipient": {
          "description": "Recipient of payments for an infusion",
          "anyOf": [
            {
              "$ref": "#/definitions/Addr"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "BurnParams": {
          "type": "object",
          "properties": {
            "compatible_traits": {
              "anyOf": [
                {
                  "$ref": "#/definitions/CompatibleTraits"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          }
        },
        "CompatibleTraits": {
          "type": "object",
          "required": [
            "a",
            "b"
          ],
          "properties": {
            "a": {
              "type": "string"
            },
            "b": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "InfusedCollection": {
          "type": "object",
          "required": [
            "base_uri",
            "name",
            "num_tokens",
            "sg",
            "symbol"
          ],
          "properties": {
            "addr": {
              "type": [
                "string",
                "null"
              ]
            },
            "admin": {
              "type": [
                "string",
                "null"
              ]
            },
            "base_uri": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "num_tokens": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            },
            "sg": {
              "type": "boolean"
            },
            "symbol": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "InfusionParams": {
          "type": "object",
          "properties": {
            "min_per_bundle": {
              "description": "Minimum amount each collection in any infusion is required",
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            },
            "mint_fee": {
              "description": "Minium amount of mint fee required for any infusion if set. Rewards will go to either infusion creator, or reward granted",
              "anyOf": [
                {
                  "$ref": "#/definitions/Coin"
                },
                {
                  "type": "null"
                }
              ]
            },
            "params": {
              "anyOf": [
                {
                  "$ref": "#/definitions/BurnParams"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "NFTCollection": {
          "type": "object",
          "required": [
            "addr",
            "min_req"
          ],
          "properties": {
            "addr": {
              "description": "Contract address of collection",
              "allOf": [
                {
                  "$ref": "#/definitions/Addr"
                }
              ]
            },
            "min_req": {
              "description": "Minimum tokens required to infuse",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "infusion_by_id": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Infusion",
      "type": "object",
      "required": [
        "collections",
        "infused_collection",
        "infusion_params"
      ],
      "properties": {
        "collections": {
          "description": "NFT collections eligible for a specific infusion",
          "type": "array",
          "items": {
            "$ref": "#/definitions/NFTCollection"
          }
        },
        "infused_collection": {
          "description": "Current data of the new infused collection",
          "allOf": [
            {
              "$ref": "#/definitions/InfusedCollection"
            }
          ]
        },
        "infusion_params": {
          "description": "Parameters of a specific infusion",
          "allOf": [
            {
              "$ref": "#/definitions/InfusionParams"
            }
          ]
        },
        "payment_recipient": {
          "description": "Recipient of payments for an infusion",
          "anyOf": [
            {
              "$ref": "#/definitions/Addr"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "BurnParams": {
          "type": "object",
          "properties": {
            "compatible_traits": {
              "anyOf": [
                {
                  "$ref": "#/definitions/CompatibleTraits"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          }
        },
        "CompatibleTraits": {
          "type": "object",
          "required": [
            "a",
            "b"
          ],
          "properties": {
            "a": {
              "type": "string"
            },
            "b": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "InfusedCollection": {
          "type": "object",
          "required": [
            "base_uri",
            "name",
            "num_tokens",
            "sg",
            "symbol"
          ],
          "properties": {
            "addr": {
              "type": [
                "string",
                "null"
              ]
            },
            "admin": {
              "type": [
                "string",
                "null"
              ]
            },
            "base_uri": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "num_tokens": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            },
            "sg": {
              "type": "boolean"
            },
            "symbol": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "InfusionParams": {
          "type": "object",
          "properties": {
            "min_per_bundle": {
              "description": "Minimum amount each collection in any infusion is required",
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            },
            "mint_fee": {
              "description": "Minium amount of mint fee required for any infusion if set. Rewards will go to either infusion creator, or reward granted",
              "anyOf": [
                {
                  "$ref": "#/definitions/Coin"
                },
                {
                  "type": "null"
                }
              ]
            },
            "params": {
              "anyOf": [
                {
                  "$ref": "#/definitions/BurnParams"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "NFTCollection": {
          "type": "object",
          "required": [
            "addr",
            "min_req"
          ],
          "properties": {
            "addr": {
              "description": "Contract address of collection",
              "allOf": [
                {
                  "$ref": "#/definitions/Addr"
                }
              ]
            },
            "min_req": {
              "description": "Minimum tokens required to infuse",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "infusions": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "InfusionsResponse",
      "type": "object",
      "required": [
        "infusions"
      ],
      "properties": {
        "infusions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InfusionState"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "BurnParams": {
          "type": "object",
          "properties": {
            "compatible_traits": {
              "anyOf": [
                {
                  "$ref": "#/definitions/CompatibleTraits"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          }
        },
        "CompatibleTraits": {
          "type": "object",
          "required": [
            "a",
            "b"
          ],
          "properties": {
            "a": {
              "type": "string"
            },
            "b": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "InfusedCollection": {
          "type": "object",
          "required": [
            "base_uri",
            "name",
            "num_tokens",
            "sg",
            "symbol"
          ],
          "properties": {
            "addr": {
              "type": [
                "string",
                "null"
              ]
            },
            "admin": {
              "type": [
                "string",
                "null"
              ]
            },
            "base_uri": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "num_tokens": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            },
            "sg": {
              "type": "boolean"
            },
            "symbol": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "InfusionParamState": {
          "type": "object",
          "required": [
            "min_per_bundle"
          ],
          "properties": {
            "min_per_bundle": {
              "description": "Minimum amount each collection in any infusion is required",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "mint_fee": {
              "description": "Minium amount of mint fee required for any infusion if set. Rewards will go to either infusion creator, or reward granted",
              "anyOf": [
                {
                  "$ref": "#/definitions/Coin"
                },
                {
                  "type": "null"
                }
              ]
            },
            "params": {
              "anyOf": [
                {
                  "$ref": "#/definitions/BurnParams"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "InfusionState": {
          "type": "object",
          "required": [
            "collections",
            "infused_collection",
            "infusion_params",
            "payment_recipient"
          ],
          "properties": {
            "collections": {
              "description": "NFT collections eligible for a specific infusion",
              "type": "array",
              "items": {
                "$ref": "#/definitions/NFTCollection"
              }
            },
            "infused_collection": {
              "description": "Current data of the new infused collection",
              "allOf": [
                {
                  "$ref": "#/definitions/InfusedCollection"
                }
              ]
            },
            "infusion_params": {
              "description": "Parameters of a specific infusion",
              "allOf": [
                {
                  "$ref": "#/definitions/InfusionParamState"
                }
              ]
            },
            "payment_recipient": {
              "description": "Recipient of payments for an infusion",
              "allOf": [
                {
                  "$ref": "#/definitions/Addr"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "NFTCollection": {
          "type": "object",
          "required": [
            "addr",
            "min_req"
          ],
          "properties": {
            "addr": {
              "description": "Contract address of collection",
              "allOf": [
                {
                  "$ref": "#/definitions/Addr"
                }
              ]
            },
            "min_req": {
              "description": "Minimum tokens required to infuse",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "is_in_bundle": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Boolean",
      "type": "boolean"
    }
  }
}
